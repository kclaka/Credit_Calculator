type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CreditCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=8722',
                        '--periods=120',
                        '--interest=5.6',
                    ],
                    attach=('principal', 800018, 246622),
                ),
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=6898',
                        '--periods=240',
                        '--interest=3.4',
                    ],
                    attach=('principal', 1199997, 455523),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=8',
                        '--interest=9.8',
                    ],
                    attach=('payment', 129638, 37104),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=60',
                        '--interest=10',
                    ],
                    attach=('payment', 274880, 21248),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=500000',
                        '--payment=23000',
                        '--interest=7.8',
                    ],
                    attach=('periods', 52000, 24),
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=1000000',
                        '--periods=10',
                        '--interest=10',
                    ],
                    attach=[
                        108334,
                        107500,
                        106667,
                        105834,
                        105000,
                        104167,
                        103334,
                        102500,
                        101667,
                        100834,
                        45837,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=500000',
                        '--periods=8',
                        '--interest=7.8',
                    ],
                    attach=[
                        65750,
                        65344,
                        64938,
                        64532,
                        64125,
                        63719,
                        63313,
                        62907,
                        14628,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--payment=104000',
                    ],
                    attach='Incorrect',
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=-1000000',
                        '--payment=104000',
                        '--periods=8',
                    ],
                    attach='Incorrect',
                ),

            ]

        def check(self, reply, attach):
            if attach == 'Incorrect':
                if attach.lower() in reply.lower():
                    return CheckResult.correct()

                return CheckResult.wrong(
                    'Parameters are incorrect. '
                    'Just output "Incorrect parameters"'
                )

            numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
            if len(numbers) == 0:
                return CheckResult.wrong(
                    'No numbers in the answer',
                )

            if isinstance(attach, tuple):
                if attach[0] == 'periods':
                    years = int(attach[2] / 12)
                    months = str(int(attach[2] % 12))
                    for i in numbers:
                        if abs(attach[1] - float(i)) < 2:
                            if str(months) in numbers or str(years) in numbers:
                                return CheckResult.correct()

                    if years == 0:
                        output = (
                            'Looks like your periods '
                            'calculations aren\'t working properly. '
                            'Correct months and overpayment are '
                            '[ {0}, {1} ]'
                            ', but you output: {2}'
                        )
                        return CheckResult.wrong(
                            output.format(attach[2], attach[1], numbers),
                        )
                    else:
                        if months != '0':
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years, months and overpayment are '
                                '[ {0}, {1}, {2} ]'
                                ', but you output: {3}'
                            )
                            return CheckResult.wrong(
                                output.format(years, months, attach[1], numbers),
                            )
                        else:
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years and overpayment are '
                                '[ {0}, {1} ]'
                                ', but you output: {2}'
                            )
                            return CheckResult.wrong(
                                output.format(years, attach[1], numbers),
                            )
                for i in numbers:
                    if not abs(attach[1] - float(i)) < 2:
                        if not abs(attach[2] - float(i)) < 2:
                            if attach[0] == 'payment':
                                output = (
                                    'Looks like your annuity payments '
                                    'calculations aren\'t working properly. '
                                    'Correct annuity payment and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            else:
                                output = (
                                    'Looks like your credit principal '
                                    'calculations aren\'t working properly. '
                                    'Correct credit principal and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            return CheckResult.wrong(
                                output.format(attach[2], attach[1], numbers),
                            )

                return CheckResult.correct()

            if isinstance(attach, list):
                if (len(numbers) + 1) / 2 < len(attach):
                    user_numbers = numbers[1::2]
                    if numbers[-1] not in user_numbers:
                        user_numbers.append(numbers[-1])
                    return CheckResult.wrong(
                        'Not enough values for diff payment in the answer '
                        'must be {0} with overpayment {1}, but you output: {2}'
                        .format(attach[:-1], attach[-1], user_numbers)
                    )

                for figure in attach:
                    flag = False
                    for number in numbers:
                        if abs(float(number) - figure) < 2:
                            flag = True
                            break
                    if flag is False:
                        user_numbers = numbers[1::2]
                        if numbers[-1] not in user_numbers:
                            user_numbers.append(numbers[-1])
                        return CheckResult.wrong(
                            'Incorrect result '
                            'must be {0} with overpayment {1}, but you output: {2}'
                            .format(attach[:-1], attach[-1], user_numbers)
                        )

            return CheckResult.correct()


    if __name__ == '__main__':
        CreditCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
- name: creditcalc/creditcalc.py
  visible: true
  text: |
    from math import ceil, log, floor
    from math import exp


    def calc_months():
        monthly_payments = int(input("Enter monthly payment:"))
        repay = ceil(get_principal() / monthly_payments)
        print(f"It takes 7 months to {repay} the credit")


    def get_payment(months):
        return get_principal() / months


    def calc_lastpayment(months, payment):
        return get_principal() - (months - 1) * payment


    # def calc_mpayments():
    #     months = int(input("Enter count of months:"))
    #     payment = get_payment(months)
    #     if isinstance(payment, float):
    #         print(f"Your monthly payment = {ceil(payment)} with last month "
    #               f"payment = {ceil(calc_lastpayment(months, ceil(payment)))}.")
    #     else:
    #         print(f"Your monthly payment = {ceil(payment)}")


    def get_principal():
        months = float(input("Enter monthly payment:"))
        count = int(input("Enter count of periods:"))
        credit_interest = float(input("Enter credit interest:"))
        i = (credit_interest / 100) / (12 * (100 / 100))
        principal_dem = (i * (pow((1 + i), count)))/(pow((1 + i), count) - 1)
        principal = months/principal_dem
        print(f"Your credit principal = {floor(principal)}!")


    def get_months():
        credit_principal = int(input("Enter the credit principal:"))
        monthly_payments = int(input("Enter monthly payment:"))
        credit_interest = float(input("Enter credit interest:"))
        nominal_interest = (credit_interest / 100) / (12 * (100 / 100))
        num = monthly_payments / (monthly_payments - (nominal_interest * credit_principal))
        num_months = log(num, (1 + nominal_interest))
        years = ceil(num_months) // 12
        months = ceil(num_months) % 12
        print(f"You need {years} years and {months} months to repay this credit!")


    def get_annuity():
        credit_principal = int(input("Enter the credit principal:"))
        count_periods = int(input("Enter count of periods:"))
        credit_interest = float(input("Enter credit interest:"))
        year_interest = (credit_interest / 100) * (1 / 12)
        annuity = credit_principal * ((year_interest * pow(1 + year_interest, count_periods) /
                                       (pow(1 + year_interest, count_periods) - 1)))

        print(f"Your annuity payment = {ceil(annuity)}!")


    def calc_options():
        options = input("What do you want to calculate? "
                        "type \"n\" - for count of months, "
                        "type \"a\" - for annuity monthly payment,"
                        "type \"p\" - for credit principal:")
        if options == "m":
            calc_months()
        elif options == "p":
            get_principal()
        elif options == "n":
            get_months()
        elif options == "a":
            get_annuity()
        else:
            print("Option not found")


    calc_options()

    # credit_principal = 'Credit principal: 1000'
    # final_output = 'The credit has been repaid!'
    # first_month = 'Month 1: paid out 250'
    # second_month = 'Month 2: paid out 250'
    # third_month = 'Month 3: paid out 500'


    # write your code here
    # print(credit_principal)
    # print(first_month)
    # print(second_month)
    # print(third_month)
    # print(final_output)
  learner_created: true
feedback_link: https://hyperskill.org/projects/90/stages/503/implement
status: Solved
record: -1
